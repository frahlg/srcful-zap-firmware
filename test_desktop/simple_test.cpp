#include <iostream>


#include "../src/data/data_package.h"
#include "../src/data/p1data.h"
#include "../src/data/p1_dlms_decoder.h"

int test_decoder_frame() {
    
    P1Data p1data;
    p1data.setDeviceId("12345678901234567890");
    P1DLMSDecoder decoder;
    uint8_t buffer[] = {
        0x7E, 0xA2, 0x43, 0x41, 0x08, 0x83, 0x13, 0x85, 0xEB, 0xE6, 0xE7, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1B,
        0x02, 0x02, 0x09, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0xFF, 0x09, 0x0C, 0x07, 0xE5, 0x0C, 0x0A, 0x05, 0x10, 0x39, 0x00, 0xFF, 0x80, 0x00, 0xFF,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x01, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x07, 0xE5, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x02, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x03, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x04, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x02, 0x48, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x1F, 0x07, 0x00, 0xFF, 0x10, 0x00, 0x09, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x21,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x33, 0x07, 0x00, 0xFF, 0x10, 0x00, 0x25, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x21,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x47, 0x07, 0x00, 0xFF, 0x10, 0x00, 0x2E, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x21,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x20, 0x07, 0x00, 0xFF, 0x12, 0x08, 0xE3, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x23,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x34, 0x07, 0x00, 0xFF, 0x12, 0x08, 0xD8, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x23,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x48, 0x07, 0x00, 0xFF, 0x12, 0x08, 0xDF, 0x02, 0x02, 0x0F, 0xFF, 0x16, 0x23,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x15, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0xD5, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x16, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x17, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x18, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x36, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x29, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x03, 0x0C, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2A, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2B, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x01, 0x21, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x2C, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x3D, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x03, 0xF9, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x3E, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1B,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x3F, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x40, 0x07, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0xE9, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1D,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF, 0x06, 0x03, 0xC2, 0x5A, 0x64, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1E,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x1E,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x03, 0x08, 0x00, 0xFF, 0x06, 0x00, 0x04, 0x5D, 0x06, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x20,
        0x02, 0x03, 0x09, 0x06, 0x01, 0x00, 0x04, 0x08, 0x00, 0xFF, 0x06, 0x00, 0xB4, 0x9D, 0x89, 0x02, 0x02, 0x0F, 0x00, 0x16, 0x20,
        0x1C, 0x90, 0x7E
    };

    decoder.decodeBuffer(buffer, sizeof(buffer), p1data);


    for (int i = 0; i < p1data.obisCount; i++) {
        char buffer[64];
        p1data.obisValues[i].toString(buffer, sizeof(buffer));
        std::cout << "OBIS Value: " << buffer << std::endl;
    }

    return 0;
}

int main() {
    std::cout << "==== P1 DLMS Decoder Desktop Tests ====" << std::endl;
    
    try {
        // testBasicFunctionality();
        DataPackage dataPackage;

        P1Data p1data;
        p1data.setDeviceId("12345678901234567890");
        P1DLMSDecoder decoder;
        uint8_t buffer[] = {0x00, 0x01};

        decoder.decodeBuffer(buffer, 2, p1data);

        test_decoder_frame();

        std::cout << "All tests passed!" << std::endl;
        return 0;
    } catch (const std::exception& e) {
        // std::cerr << "Test failed with exception: " << e.what() << std::endl;
        return 1;
    }
}